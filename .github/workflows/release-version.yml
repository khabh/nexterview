name: Release Version

on:
  pull_request:
    types: [ closed ]
    branches: [ "test" ]

jobs:
  release-version:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: read
      checks: write
      pull-requests: write

    outputs:
      version: ${{ steps.set_version.outputs.version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: 'true'

      - name: Get latest tag
        id: get_tag
        run: |
          TAG=$(git tag --sort=-creatordate | head -n 1 || echo "v0.0.0")
          echo "Latest tag: $TAG"
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"

      - name: Parse version
        id: parse_version
        run: |
          version="${{ steps.get_tag.outputs.tag }}"
          version="${version#v}"
          IFS='.' read -ra parts <<< "$version"
          echo "major=${parts[0]}" >> $GITHUB_OUTPUT
          echo "minor=${parts[1]}" >> $GITHUB_OUTPUT
          echo "patch=${parts[2]}" >> $GITHUB_OUTPUT

      - name: Determine next version
        id: set_version
        run: |
          major=${{ steps.parse_version.outputs.major }}
          minor=${{ steps.parse_version.outputs.minor }}
          patch=${{ steps.parse_version.outputs.patch }}
          
          echo "📦 Fetching labels from PR..."
          response=$(curl -s -H "Authorization: token ${{ secrets.PAT }}" \
            https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/labels)
          echo "🔎 Response from GitHub API:"
          echo "$response"
          labels=$(echo "$response" | jq -r '.[].name')
          if echo "$labels" | grep -q "version:major"; then
            major=$((major + 1))
            minor=0
            patch=0
          elif echo "$labels" | grep -q "version:minor"; then
            minor=$((minor + 1))
            patch=0
          elif echo "$labels" | grep -q "version:patch"; then
            patch=$((patch + 1))
          else
            echo "❌ No version label found"
            exit 1
          fi
          new_version="v${major}.${minor}.${patch}"
          echo "version=$new_version" >> $GITHUB_OUTPUT

      - name: Write version to file
        run: echo "${{ steps.set_version.outputs.version }}" > version.txt

      - name: Upload version artifact
        uses: actions/upload-artifact@v4
        with:
          name: version
          path: version.txt
