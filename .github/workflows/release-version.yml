name: Release Version

on:
  pull_request:
    branches: [ "test" ]

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: read
      checks: write
      pull-requests: write

    outputs:
      version: ${{ steps.set_version.outputs.version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: get_latest_tag
        run: |
          TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $TAG"
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"

      - name: Determine version bump
        id: determine_bump
        run: |
          LABELS="${{ toJson(github.event.pull_request.labels) }}"
          if echo "$LABELS" | grep -q "version:major"; then
            echo "bump=major" >> "$GITHUB_OUTPUT"
          elif echo "$LABELS" | grep -q "version:minor"; then
            echo "bump=minor" >> "$GITHUB_OUTPUT"
          else
            echo "bump=patch" >> "$GITHUB_OUTPUT"
          fi

      - name: Calculate next version
        id: set_version
        run: |
          VERSION=${{ steps.get_latest_tag.outputs.tag }}
          IFS='.' read -r -a parts <<< "${VERSION#v}"

          major=${parts[0]}
          minor=${parts[1]}
          patch=${parts[2]}

          bump=${{ steps.determine_bump.outputs.bump }}

          if [[ "$bump" == "major" ]]; then
            major=$((major + 1))
            minor=0
            patch=0
          elif [[ "$bump" == "minor" ]]; then
            minor=$((minor + 1))
            patch=0
          else
            patch=$((patch + 1))
          fi

          NEXT_VERSION="v$major.$minor.$patch"
          echo "âœ… Next version: $NEXT_VERSION"
          echo "version=$NEXT_VERSION" >> "$GITHUB_OUTPUT"

      - name: Write version to file
        run: echo "${{ steps.set_version.outputs.version }}" > version.txt

      - name: Upload version artifact
        uses: actions/upload-artifact@v4
        with:
          name: version
          path: version.txt
